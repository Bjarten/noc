name: "tripleloss_coco_caption_model_paired_data"
layer {
  name: "data"
  type: "HDF5Data"
  top: "mean_fc7"
  top: "labels"
  hdf5_data_param {
#      source:"/z/vsub/coco2014/hdf5/buffer_1_rm8obj_label72k_1/train_batches/hdf5_chunk_list.txt"
      source:"/z/vsub/coco2014/hdf5/buffer_1_rm8newobj_label72k_1/train_batches/hdf5_chunk_list.txt"
      batch_size: 32
  }
  include { phase: TRAIN }
}
layer {
  name: "txt_data"
  type: "HDF5Data"
  top: "cont_sentence"
  top: "input_sentence"
  top: "target_sequence"
  hdf5_data_param {
#    source:"/z/vsub/coco2014/hdf5/buffer_32_rm8obj_label72k_20/train_batches/hdf5_chunk_list.txt"
    source:"/z/vsub/coco2014/hdf5/buffer_32_rm8newobj_label72k_20/train_batches/hdf5_chunk_list.txt"
    batch_size: 20
  }
  include { phase: TRAIN }
}
layer {
  name: "data"
  type: "HDF5Data"
  top: "mean_fc7"
  top: "labels"
  hdf5_data_param {
#      source:"/z/vsub/coco2014/hdf5/buffer_1_rm8obj_label72k_1/train_batches/hdf5_chunk_list.txt"
      source:"/z/vsub/coco2014/hdf5/buffer_1_rm8newobj_label72k_1/train_batches/hdf5_chunk_list.txt"
      batch_size: 32
  }
  include { phase: TEST  stage: 'test-on-train' }
}
layer {
  name: "txt_data"
  type: "HDF5Data"
  top: "cont_sentence"
  top: "input_sentence"
  top: "target_sequence"
  hdf5_data_param {
#    source:"/z/vsub/coco2014/hdf5/buffer_32_rm8obj_label72k_20/train_batches/hdf5_chunk_list.txt"
    source:"/z/vsub/coco2014/hdf5/buffer_32_rm8newobj_label72k_20/train_batches/hdf5_chunk_list.txt"
    batch_size: 20
  }
  include { phase: TEST  stage: 'test-on-train' }
}
layer {
  name: "data"
  type: "HDF5Data"
  top: "mean_fc7"
  top: "labels"
  hdf5_data_param {
#      source:"/x/vsub/coco2014/hdf5/buffer_1_rm8obj_label72k_1/valid_batches/hdf5_chunk_list.txt"
      source:"/z/vsub/coco2014/hdf5/buffer_1_rm8newobj_label72k_1/valid_batches/hdf5_chunk_list.txt"
      batch_size: 32
  }
  include { phase: TEST  stage: 'test-on-val' }
}
layer {
  name: "txt_data"
  type: "HDF5Data"
  top: "cont_sentence"
  top: "input_sentence"
  top: "target_sequence"
  hdf5_data_param {
#    source:"/x/vsub/coco2014/hdf5/buffer_32_rm8obj_label72k_21/valid_batches/hdf5_chunk_list.txt"
    source:"/z/vsub/coco2014/hdf5/buffer_32_rm8newobj_label72k_20/valid_batches/hdf5_chunk_list.txt"
    batch_size: 20
  }
  include { phase: TEST  stage: 'test-on-val' }
}
# image only classifier
layer {
  name: "img_only_data"
  type: "HDF5Data"
  top: "img_only_fc7"
  top: "img_only_labels"
  hdf5_data_param {
#      source:"/x/vsub/coco2014/hdf5/buffer_1_only8obj_label72k_1/train_batches/hdf5_chunk_list.txt"
      source:"/x/vsub/coco2014/hdf5/buffer_1_only8newobj_label72k_1/train_batches/hdf5_chunk_list.txt"
      batch_size: 16
  }
  include { phase: TRAIN }
}
layer {
  name: "img_only_data"
  type: "HDF5Data"
  top: "img_only_fc7"
  top: "img_only_labels"
  hdf5_data_param {
#      source:"/x/vsub/coco2014/hdf5/buffer_1_only8obj_label72k_1/train_batches/hdf5_chunk_list.txt"
      source:"/x/vsub/coco2014/hdf5/buffer_1_only8newobj_label72k_1/train_batches/hdf5_chunk_list.txt"
      batch_size: 16
  }
  include { phase: TEST stage: 'test-on-train' }
}
layer {
  name: "img_only_data"
  type: "HDF5Data"
  top: "img_only_fc7"
  top: "img_only_labels"
  hdf5_data_param {
#      source:"/x/vsub/coco2014/hdf5/buffer_1_only8obj_label72k_1/train_batches/hdf5_chunk_list.txt"
      source:"/x/vsub/coco2014/hdf5/buffer_1_only8newobj_label72k_1/train_batches/hdf5_chunk_list.txt"
      batch_size: 16
  }
  include { phase: TEST stage: 'test-on-val' }
}
# sent only data
layer {
  name: "txt_only_data"
  type: "HDF5Data"
  top: "txt_only_cont_sentence"
  top: "txt_only_input_sentence"
  top: "txt_only_target_sequence"
  hdf5_data_param {
#    source:"/z/vsub/coco2014/hdf5/buffer_32_only8obj_sents72k_20/train_batches/hdf5_chunk_list.txt"
    source:"/z/vsub/coco2014/hdf5/buffer_32_only8newobj_sents72k_20/train_batches/hdf5_chunk_list.txt"
    batch_size: 20
  }
  include { phase: TRAIN }
}
layer {
  name: "txt_only_data"
  type: "HDF5Data"
  top: "txt_only_cont_sentence"
  top: "txt_only_input_sentence"
  top: "txt_only_target_sequence"
  hdf5_data_param {
#    source:"/z/vsub/coco2014/hdf5/buffer_32_only8obj_sents72k_20/train_batches/hdf5_chunk_list.txt"
    source:"/z/vsub/coco2014/hdf5/buffer_32_only8newobj_sents72k_20/train_batches/hdf5_chunk_list.txt"
    batch_size: 20
  }
  include { phase: TEST stage: 'test-on-train' }
}
layer {
  name: "txt_only_data"
  type: "HDF5Data"
  top: "txt_only_cont_sentence"
  top: "txt_only_input_sentence"
  top: "txt_only_target_sequence"
  hdf5_data_param {
#    source:"/z/vsub/coco2014/hdf5/buffer_32_only8obj_sents72k_20/train_batches/hdf5_chunk_list.txt"
    source:"/z/vsub/coco2014/hdf5/buffer_32_only8newobj_sents72k_20/train_batches/hdf5_chunk_list.txt"
    batch_size: 20
  }
  include { phase: TEST stage: 'test-on-val' }
}

# network model
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "mean_fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "drop7_imonly"
  type: "Dropout"
  bottom: "img_only_fc7"
  top: "dropped_img_only_fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "embedding_input"
  type: "Embed"
  bottom: "input_sentence"
  top: "embedded_input_sentence_1"
  param {
    name: "glove_embed"
    lr_mult: 0
  }
  embed_param {
    num_output: 300
    input_dim: 72701
    bias_term: false
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "lstm1"
  type: "LSTM"
  bottom: "embedded_input_sentence_1"
  bottom: "cont_sentence"
  top: "lstm1"
  param {
    name: "lstm1_shared_Whc"
    lr_mult: 0
    decay_mult: 0
  }
  param {
    name: "lstm1_shared_Wxc"
    lr_mult: 0
    decay_mult: 0
  }
  param {
    name: "lstm1_shared_Wbc"
    lr_mult: 0
    decay_mult: 0
  }
  recurrent_param {
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  exclude { stage: "tune_lm"}
}
layer {
  name: "lstm1"
  type: "LSTM"
  bottom: "embedded_input_sentence_1"
  bottom: "cont_sentence"
  top: "lstm1"
  param {
    name: "lstm1_shared_Whc"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "lstm1_shared_Wxc"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "lstm1_shared_Wbc"
    lr_mult: 1
    decay_mult: 1
  }
  recurrent_param {
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  include { stage: "tune_lm"}
}
layer {
  name: "concat-lm"
  type: "Concat"
  bottom: "embedded_input_sentence_1"
  bottom: "lstm1"
  top: "concat_lm"
  concat_param {
    axis: 2
  }
}
layer {
  name: "predict"
  type: "InnerProduct"
  bottom: "concat_lm"
  top: "predict_inter"
  param {
    name: "predict_inter_W"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "predict_inter_b"
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
  include { stage: "tune_lm"}
}
layer {
  name: "predict"
  type: "InnerProduct"
  bottom: "concat_lm"
  top: "predict_inter"
  param {
    name: "predict_inter_W"
    lr_mult: 0
    decay_mult: 0
  }
  param {
    name: "predict_inter_b"
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
  exclude { stage: "tune_lm"}
}
layer {
  name: "predict_im_lm"
  type: "InnerProduct"
  bottom: "predict_inter"
  top: "predict-lm"
  param {
    name: "predict_lm_voc_W"
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 72701
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}

layer {
  name: "predict-im"
  type: "InnerProduct"
  bottom: "fc7"
  top: "predict-im"
  param {
    name: "predict_im_voc_W"
    lr_mult: 0.1
    decay_mult: 0.1
  }
  inner_product_param {
    num_output: 72701
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  exclude { stage: "fix_im"}
}
layer {
  name: "predict-im"
  type: "InnerProduct"
  bottom: "fc7"
  top: "predict-im"
  param {
    name: "predict_im_voc_W"
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 72701
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  include { stage: "fix_im"}
}
layer {
  name: "img_only_predict-im"
  type: "InnerProduct"
  bottom: "dropped_img_only_fc7"
  top: "img_only_predict-im"
  param {
    name: "predict_im_voc_W"
    lr_mult: 0.1
    decay_mult: 0.1
  }
  inner_product_param {
    num_output: 72701
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  exclude { stage: "fix_im"}
}
layer {
  name: "img_only_predict-im"
  type: "InnerProduct"
  bottom: "dropped_img_only_fc7"
  top: "img_only_predict-im"
  param {
    name: "predict_im_voc_W"
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 72701
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  include { stage: "fix_im"}
}
layer {
  name: "loss"
  type: "SigmoidCrossEntropyLoss"
  bottom: "predict-im"
  bottom: "labels"
  top: "classifier_loss"
  loss_param{
    ignore_label: -1
  }
}
layer {
  name: "img_only_loss"
  type: "SigmoidCrossEntropyLoss"
  bottom: "img_only_predict-im"
  bottom: "img_only_labels"
  top: "img_only_classifier_loss"
  loss_param{
    ignore_label: -1
  }
}
layer {
  name: "reshape-predict"
  type: "Reshape"
  bottom: "predict-im"
  top: "reshape-predict"
  reshape_param {
    shape {
      dim: 1
      dim: 32
      dim: 72701
    }
  }
}
layer {
  name: "tile-predict"
  type: "Tile"
  bottom: "reshape-predict"
  top: "tile-predict-im"
  tile_param {
    axis: 0
    tiles: 20
  }
}
layer {
  name: "add-predictions"
  type: "Eltwise"
  bottom: "predict-lm"
  bottom: "tile-predict-im"
  top: "predict-multimodal"
  eltwise_param {
    operation: SUM
  }
}

# Sentence only LM layers
layer {
  name: "txt_only_embedding_input"
  type: "Embed"
  bottom: "txt_only_input_sentence"
  top: "txt_only_embedded_input_sentence_1"
  param {
    name: "glove_embed"
    lr_mult: 0
  }
  embed_param {
    num_output: 300
    input_dim: 72701
    bias_term: false
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "txt_only_lstm1"
  type: "LSTM"
  bottom: "txt_only_embedded_input_sentence_1"
  bottom: "txt_only_cont_sentence"
  top: "txt_only_lstm1"
  param {
    name: "lstm1_shared_Whc"
    lr_mult: 0
    decay_mult: 0
  }
  param {
    name: "lstm1_shared_Wxc"
    lr_mult: 0
    decay_mult: 0
  }
  param {
    name: "lstm1_shared_Wbc"
    lr_mult: 0
    decay_mult: 0
  }
  recurrent_param {
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  exclude { stage: "tune_lm"}
}
layer {
  name: "txt_only_lstm1"
  type: "LSTM"
  bottom: "txt_only_embedded_input_sentence_1"
  bottom: "txt_only_cont_sentence"
  top: "txt_only_lstm1"
  param {
    name: "lstm1_shared_Whc"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "lstm1_shared_Wxc"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "lstm1_shared_Wbc"
    lr_mult: 1
    decay_mult: 1
  }
  recurrent_param {
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  include { stage: "tune_lm"}
}
layer {
  name: "txt_only_concat-lm"
  type: "Concat"
  bottom: "txt_only_embedded_input_sentence_1"
  bottom: "txt_only_lstm1"
  top: "txt_only_concat_lm"
  concat_param {
    axis: 2
  }
}
layer {
  name: "txt_only_predict"
  type: "InnerProduct"
  bottom: "txt_only_concat_lm"
  top: "txt_only_predict_inter"
  param {
    name: "predict_inter_W"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "predict_inter_b"
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
  include { stage: "tune_lm"}
}
layer {
  name: "txt_only_predict"
  type: "InnerProduct"
  bottom: "txt_only_concat_lm"
  top: "txt_only_predict_inter"
  param {
    name: "predict_inter_W"
    lr_mult: 0
    decay_mult: 0
  }
  param {
    name: "predict_inter_b"
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
  exclude { stage: "tune_lm"}
}
layer {
  name: "txt_only_predict_im_lm"
  type: "InnerProduct"
  bottom: "txt_only_predict_inter"
  top: "txt_only_predict-lm"
  param {
    name: "predict_lm_voc_W"
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 72701
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}



# LOSS layers
layer {
  name: "cross_entropy_loss"
  type: "SoftmaxWithLoss"
  bottom: "predict-multimodal"
  bottom: "target_sequence"
  top: "cross_entropy_loss"
  loss_weight: 20
  loss_param {
    ignore_label: -1
  }
  softmax_param {
    axis: 2
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "predict-multimodal"
  bottom: "target_sequence"
  top: "accuracy"
  include { phase: TEST }
  accuracy_param {
    axis: 2
    ignore_label: -1
  }
}
# LOSS TXT ONLY layers
layer {
  name: "txt_only_cross_entropy_loss"
  type: "SoftmaxWithLoss"
  bottom: "txt_only_predict-lm"
  bottom: "txt_only_target_sequence"
  top: "txt_only_cross_entropy_loss"
  loss_weight: 20
  loss_param {
    ignore_label: -1
  }
  softmax_param {
    axis: 2
  }
}
layer {
  name: "txt_only_accuracy"
  type: "Accuracy"
  bottom: "txt_only_predict-lm"
  bottom: "txt_only_target_sequence"
  top: "txt_only_accuracy"
  include { phase: TEST }
  accuracy_param {
    axis: 2
    ignore_label: -1
  }
}
